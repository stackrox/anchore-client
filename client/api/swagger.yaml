---
swagger: "2.0"
info:
  description: "This is the Anchore Engine API. Provides the primary external API\
    \ for users of the service."
  version: "0.1.9"
  title: "Anchore Engine API Server"
  contact:
    email: "nurmi@anchore.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/"
tags:
- name: "Subscriptions"
  description: "Subscription Management"
- name: "Policies"
  description: "Policy Management"
- name: "Images"
  description: "Image Management"
- name: "Image Content"
  description: "View Image Content"
- name: "Vulnerabilities"
  description: "Vulnerability checks and reports"
- name: "Policy Evaluation"
  description: "Evaluate images against policies"
- name: "Registries"
  description: "Registry Management"
- name: "Repository Credentials"
  description: "Repository Credential Management"
- name: "System"
  description: "System Management"
- name: "Services"
  description: "Service Management"
- name: "Summaries"
  description: "Resource Summaries"
- name: "Events"
  description: "View and delete events"
- name: "Queries"
  description: "Resource Queries"
- name: "User Management"
  description: "Manage Accounts, Users, and Credentials"
- name: "Identity"
  description: "Get and operate on the authenticated user's identity"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []
paths:
  /:
    get:
      description: "Simple status check"
      operationId: "ping"
      parameters: []
      responses:
        200:
          description: "Version check response, returns the api version prefix (e.g.\
            \ 'v1')"
          schema:
            type: "string"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /account:
    get:
      tags:
      - "Identity"
      summary: "List the account for the authenticated user"
      operationId: "get_users_account"
      parameters: []
      responses:
        200:
          description: "User details for caller's user"
          schema:
            $ref: "#/definitions/Account"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts:
    get:
      tags:
      - "User Management"
      summary: "List user summaries. Only available to the system admin user."
      operationId: "list_accounts"
      parameters:
      - name: "state"
        in: "query"
        description: "Filter accounts by state"
        required: false
        type: "string"
        enum:
        - "active"
        - "disabled"
        - "deleting"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Accound summary listing"
          schema:
            $ref: "#/definitions/AccountList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listAccounts"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    post:
      tags:
      - "User Management"
      summary: "Create a new user. Only avaialble to admin user."
      operationId: "create_account"
      parameters:
      - in: "body"
        name: "account"
        required: true
        schema:
          $ref: "#/definitions/AccountCreationRequest"
        x-exportParamName: "Account"
      responses:
        200:
          description: "Account Record"
          schema:
            $ref: "#/definitions/Account"
        409:
          description: "Conflicting user information. User already exists."
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "createAccount"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts/{accountname}:
    get:
      tags:
      - "User Management"
      summary: "Get info about an user. Only available to admin user. Uses the main\
        \ user Id, not a username."
      operationId: "get_account"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      responses:
        200:
          description: "Get user information"
          schema:
            $ref: "#/definitions/Account"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getAccount"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    delete:
      tags:
      - "User Management"
      summary: "Delete the specified account, only allowed if the account is in the\
        \ disabled state. All users will be deleted along with the account and all\
        \ resources will be garbage collected"
      operationId: "delete_account"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      responses:
        204:
          description: "Successful deletion"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteAccount"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts/{accountname}/state:
    put:
      tags:
      - "User Management"
      summary: "Update the state of an account to either enabled or disabled. For\
        \ deletion use the DELETE route"
      operationId: "update_account_state"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - in: "body"
        name: "desired_state"
        required: true
        schema:
          $ref: "#/definitions/AccountStatus"
        x-exportParamName: "DesiredState"
      responses:
        200:
          description: "Updated state of the account"
          schema:
            $ref: "#/definitions/AccountStatus"
        400:
          description: "State requested is invalid based on current state of the account"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updateAccount"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts/{accountname}/users:
    get:
      tags:
      - "User Management"
      summary: "List accounts for the user"
      operationId: "list_users"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      responses:
        200:
          description: "User listing"
          schema:
            type: "array"
            description: "List of user credential records"
            items:
              $ref: "#/definitions/User"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listUsers"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    post:
      tags:
      - "User Management"
      summary: "Create a new user"
      operationId: "create_user"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: "#/definitions/UserCreationRequest"
        x-exportParamName: "User"
      responses:
        200:
          description: "Credential summary"
          schema:
            $ref: "#/definitions/User"
      x-anchore-authz-action: "createUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts/{accountname}/users/{username}:
    get:
      tags:
      - "User Management"
      summary: "Get a specific user in the specified account"
      operationId: "get_account_user"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - name: "username"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "User record"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    delete:
      tags:
      - "User Management"
      summary: "Delete a specific user credential by username of the credential. Cannot\
        \ be the credential used to authenticate the request."
      operationId: "delete_user"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - name: "username"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        204:
          description: "Deleted credential"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /accounts/{accountname}/users/{username}/credentials:
    get:
      tags:
      - "User Management"
      summary: "Get current credential summary"
      operationId: "list_user_credentials"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - name: "username"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "User credential listing"
          schema:
            $ref: "#/definitions/CredentialList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    post:
      tags:
      - "User Management"
      summary: "add/replace credential"
      operationId: "create_user_credential"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - name: "username"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "credential"
        required: true
        schema:
          $ref: "#/definitions/AccessCredential"
        x-exportParamName: "Credential"
      responses:
        200:
          description: "Add a credential, overwritting if already exists"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updateUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
    delete:
      tags:
      - "User Management"
      summary: "Delete a credential by type"
      operationId: "delete_user_credential"
      parameters:
      - name: "accountname"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Accountname"
      - name: "username"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "credential_type"
        in: "query"
        required: true
        type: "string"
        enum:
        - "password"
        x-exportParamName: "CredentialType"
      responses:
        204:
          description: "Successful deletion"
        400:
          description: "Conflict, cannot delete the credential used to authenticate\
            \ this request"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updateUser"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.accounts"
  /events:
    get:
      tags:
      - "Events"
      summary: "List Events"
      description: "Returns a paginated list of events in the descending order of\
        \ their occurrence. Optional query parameters may be used for filtering results"
      operationId: "list_events"
      parameters:
      - name: "source_servicename"
        in: "query"
        description: "Filter events by the originating service"
        required: false
        type: "string"
        x-exportParamName: "SourceServicename"
        x-optionalDataType: "String"
      - name: "source_hostid"
        in: "query"
        description: "Filter events by the originating host ID"
        required: false
        type: "string"
        x-exportParamName: "SourceHostid"
        x-optionalDataType: "String"
      - name: "resource_type"
        in: "query"
        description: "Filter events by the type of resource - tag, imageDigest, repository\
          \ etc"
        required: false
        type: "string"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      - name: "resource_id"
        in: "query"
        description: "Filter events by the id of the resource"
        required: false
        type: "string"
        x-exportParamName: "ResourceId"
        x-optionalDataType: "String"
      - name: "level"
        in: "query"
        description: "Filter events by the level - INFO or ERROR"
        required: false
        type: "string"
        x-exportParamName: "Level"
        x-optionalDataType: "String"
      - name: "since"
        in: "query"
        description: "Return events that occurred after the timestamp"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "before"
        in: "query"
        description: "Return events that occurred before the timestamp"
        required: false
        type: "string"
        x-exportParamName: "Before"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "Pagination controls - return the nth page of results. Defaults\
          \ to first page if left empty"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Number of events in the result set. Defaults to 100 if left\
          \ empty"
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Paginated list of event records and the next token"
          schema:
            $ref: "#/definitions/EventsList"
      x-anchore-authz-action: "listEvents"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.events"
    delete:
      tags:
      - "Events"
      summary: "Delete Events"
      description: "Delete all or a subset of events filtered using the optional query\
        \ parameters"
      operationId: "delete_events"
      parameters:
      - name: "before"
        in: "query"
        description: "Delete events that occurred before the timestamp"
        required: false
        type: "string"
        x-exportParamName: "Before"
        x-optionalDataType: "String"
      - name: "since"
        in: "query"
        description: "Delete events that occurred after the timestamp"
        required: false
        type: "string"
        x-exportParamName: "Since"
        x-optionalDataType: "String"
      - name: "level"
        in: "query"
        description: "Delete events that match the level - INFO or ERROR"
        required: false
        type: "string"
        x-exportParamName: "Level"
        x-optionalDataType: "String"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "List of deleted event IDs"
          schema:
            type: "array"
            items:
              type: "string"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteEvents"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.events"
  /events/{eventId}:
    get:
      tags:
      - "Events"
      summary: "Get Event"
      description: "Lookup an event by its event ID"
      operationId: "get_event"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID of the event for lookup"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Single event record"
          schema:
            $ref: "#/definitions/EventResponse"
      x-anchore-authz-action: "getEvent"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.events"
    delete:
      tags:
      - "Events"
      summary: "Delete Event"
      description: "Delete an event by its event ID"
      operationId: "delete_event"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID of the event to be deleted"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Delete success"
      x-anchore-authz-action: "getEvent"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.events"
  /health:
    get:
      description: "Health check, returns 200 and no body if service is running"
      operationId: "health_noop"
      parameters: []
      responses:
        200:
          description: "Empty body on success"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /imageimport:
    post:
      tags:
      - "Images"
      summary: "Import and image analysis directly"
      operationId: "import_image"
      parameters:
      - in: "body"
        name: "analysis_report"
        required: true
        schema:
          $ref: "#/definitions/ImageAnalysisReport"
        x-exportParamName: "AnalysisReport"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Import task accepted"
          schema:
            $ref: "#/definitions/AnchoreImageList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "importImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images:
    get:
      tags:
      - "Images"
      summary: "List all visible images"
      description: "List all images visible to the user"
      operationId: "list_images"
      parameters:
      - name: "history"
        in: "query"
        description: "Include image history in the response"
        required: false
        type: "boolean"
        x-exportParamName: "History"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "image_to_get"
        required: false
        schema:
          $ref: "#/definitions/ImageFilter"
        x-nullable: true
        x-exportParamName: "ImageToGet"
      - name: "fulltag"
        in: "query"
        description: "Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest,\
          \ or myhost.com:5000/testimages:v1.1.1)"
        required: false
        type: "string"
        x-exportParamName: "Fulltag"
        x-optionalDataType: "String"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnchoreImageList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listImages"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
    post:
      tags:
      - "Images"
      summary: "Submit a new image for analysis by the engine"
      description: "Creates a new analysis task that is executed asynchronously"
      operationId: "add_image"
      parameters:
      - name: "force"
        in: "query"
        description: "Override any existing entry in the system"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "autosubscribe"
        in: "query"
        description: "Instruct engine to automatically begin watching the added tag\
          \ for updates from registry"
        required: false
        type: "boolean"
        x-exportParamName: "Autosubscribe"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "image"
        required: true
        schema:
          $ref: "#/definitions/ImageAnalysisRequest"
        x-exportParamName: "Image"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Successfully added image to analysis queue"
          schema:
            $ref: "#/definitions/AnchoreImageList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "createImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}:
    get:
      tags:
      - "Images"
      summary: "Lookup image by docker imageId"
      operationId: "get_image_by_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image lookup success"
          schema:
            $ref: "#/definitions/AnchoreImageList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
    delete:
      tags:
      - "Images"
      summary: "Delete image by docker imageId"
      operationId: "delete_image_by_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "force"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image deletion success"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/check:
    get:
      tags:
      - "Images"
      - "Policy Evaluation"
      summary: "Check policy evaluation status for image"
      description: "Get the policy evaluation for the given image"
      operationId: "get_image_policy_check_by_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "policyId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PolicyId"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "detail"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Detail"
        x-optionalDataType: "Bool"
      - name: "history"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "History"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Policy evaluation success"
          schema:
            $ref: "#/definitions/PolicyEvaluationList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImageEvaluation"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/content:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "List image content types"
      operationId: "list_image_content_by_imageid"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            type: "array"
            items:
              type: "string"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/content/files:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type files"
      operationId: "get_image_content_by_type_imageId_files"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentFilesResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/content/java:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type java"
      operationId: "get_image_content_by_type_imageId_javapackage"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentJAVAPackageResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/content/{ctype}:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type"
      operationId: "get_image_content_by_type_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "ctype"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Ctype"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentPackageResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/vuln:
    get:
      tags:
      - "Images"
      - "Vulnerabilities"
      - "Queries"
      summary: "Get vulnerability types"
      operationId: "get_image_vulnerability_types_by_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Vulnerability listing for the image"
          schema:
            type: "array"
            items:
              type: "string"
              enum:
              - "all"
              - "os"
              - "non-os"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/by_id/{imageId}/vuln/{vtype}:
    get:
      tags:
      - "Images"
      - "Vulnerabilities"
      - "Queries"
      summary: "Get vulnerabilities by type"
      operationId: "get_image_vulnerabilities_by_type_imageId"
      parameters:
      - name: "imageId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "vtype"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Vtype"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Vulnerability listing for the image"
          schema:
            $ref: "#/definitions/VulnerabilityResponse"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}:
    get:
      tags:
      - "Images"
      summary: "Get image metadata"
      operationId: "get_image"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image lookup success"
          schema:
            $ref: "#/definitions/AnchoreImageList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
    delete:
      tags:
      - "Images"
      summary: "Delete an image analysis"
      operationId: "delete_image"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "force"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image deletion success"
      x-anchore-authz-action: "deleteImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/check:
    get:
      tags:
      - "Images"
      - "Policy Evaluation"
      summary: "Check policy evaluation status for image"
      description: "Get the policy evaluation for the given image"
      operationId: "get_image_policy_check"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "policyId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PolicyId"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "detail"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Detail"
        x-optionalDataType: "Bool"
      - name: "history"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "History"
        x-optionalDataType: "Bool"
      - name: "interactive"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Interactive"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Policy evaluation success"
          schema:
            $ref: "#/definitions/PolicyEvaluationList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImageEvaluation"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/content:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "List image content types"
      operationId: "list_image_content"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content listing for the image"
          schema:
            type: "array"
            items:
              type: "string"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/content/files:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type files"
      operationId: "get_image_content_by_type_files"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentFilesResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/content/java:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type java"
      operationId: "get_image_content_by_type_javapackage"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentJAVAPackageResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/content/{ctype}:
    get:
      tags:
      - "Images"
      - "Image Content"
      - "Queries"
      summary: "Get the content of an image by type"
      operationId: "get_image_content_by_type"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "ctype"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Ctype"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Content of specified type from the image"
          schema:
            $ref: "#/definitions/ContentPackageResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/metadata:
    get:
      tags:
      - "Images"
      - "Queries"
      summary: "List image metadata types"
      operationId: "list_image_metadata"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Metadata listing for the image"
          schema:
            type: "array"
            items:
              type: "string"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/metadata/{mtype}:
    get:
      tags:
      - "Images"
      - "Queries"
      summary: "Get the metadata of an image by type"
      operationId: "get_image_metadata_by_type"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "mtype"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Mtype"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Metadata of specified type from the image"
          schema:
            $ref: "#/definitions/MetadataResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/vuln:
    get:
      tags:
      - "Images"
      - "Vulnerabilities"
      - "Queries"
      summary: "Get vulnerability types"
      operationId: "get_image_vulnerability_types"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Vulnerability listing for the image"
          schema:
            type: "array"
            items:
              type: "string"
              enum:
              - "all"
              - "os"
              - "non-os"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /images/{imageDigest}/vuln/{vtype}:
    get:
      tags:
      - "Images"
      - "Vulnerabilities"
      - "Queries"
      summary: "Get vulnerabilities by type"
      operationId: "get_image_vulnerabilities_by_type"
      parameters:
      - name: "imageDigest"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ImageDigest"
      - name: "vtype"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Vtype"
      - name: "force_refresh"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "ForceRefresh"
        x-optionalDataType: "Bool"
      - name: "vendor_only"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "VendorOnly"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Vulnerability listing for the image"
          schema:
            $ref: "#/definitions/VulnerabilityResponse"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getImage"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /policies:
    get:
      tags:
      - "Policies"
      summary: "List policies"
      description: "List all saved policy bundles"
      operationId: "list_policies"
      parameters:
      - name: "detail"
        in: "query"
        description: "Include policy bundle detail in the form of the full bundle\
          \ content for each entry"
        required: false
        type: "boolean"
        x-exportParamName: "Detail"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Policy listing"
          schema:
            $ref: "#/definitions/PolicyBundleList"
      x-anchore-authz-action: "listPolicies"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.policies"
    post:
      tags:
      - "Policies"
      summary: "Add a new policy"
      description: "Adds a new policy bundle to the system"
      operationId: "add_policy"
      parameters:
      - in: "body"
        name: "bundle"
        required: true
        schema:
          $ref: "#/definitions/PolicyBundle"
        x-exportParamName: "Bundle"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Saved bundle"
          schema:
            $ref: "#/definitions/PolicyBundleRecord"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "createPolicy"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.policies"
  /policies/{policyId}:
    get:
      tags:
      - "Policies"
      summary: "Get specific policy"
      description: "Get the policy bundle content"
      operationId: "get_policy"
      parameters:
      - name: "policyId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "detail"
        in: "query"
        description: "Include policy bundle detail in the form of the full bundle\
          \ content for each entry"
        required: false
        type: "boolean"
        x-exportParamName: "Detail"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A list with a single fetched policy bundle record"
          schema:
            $ref: "#/definitions/PolicyBundleList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getPolicy"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.policies"
    put:
      tags:
      - "Policies"
      summary: "Update policy"
      description: "Update/replace and existing policy"
      operationId: "update_policy"
      parameters:
      - in: "body"
        name: "bundle"
        required: true
        schema:
          $ref: "#/definitions/PolicyBundleRecord"
        x-exportParamName: "Bundle"
      - name: "policyId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "active"
        in: "query"
        description: "Mark policy as active"
        required: false
        type: "boolean"
        x-exportParamName: "Active"
        x-optionalDataType: "Bool"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A list with a single updated policy bundle record"
          schema:
            $ref: "#/definitions/PolicyBundleList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updatePolicy"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.policies"
    delete:
      tags:
      - "Policies"
      summary: "Delete policy"
      description: "Delete the specified policy"
      operationId: "delete_policy"
      parameters:
      - name: "policyId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PolicyId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Delete success"
        404:
          description: "Policy not found to delete"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deletePolicy"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.policies"
  /query/images/by_package:
    get:
      tags:
      - "Queries"
      summary: "List of images containing given package"
      description: "Filterable query interface to search for images containing specified\
        \ package"
      operationId: "query_images_by_package"
      parameters:
      - name: "name"
        in: "query"
        description: "Name of package to search for (e.g. sed)"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "package_type"
        in: "query"
        description: "Type of package to filter on (e.g. dpkg)"
        required: false
        type: "string"
        x-exportParamName: "PackageType"
        x-optionalDataType: "String"
      - name: "version"
        in: "query"
        description: "Version of named package to filter on (e.g. 4.4-1)"
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page of results to fetch. Pages start at 1"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit the number of records for the requested page. If omitted\
          \ or set to 0, return all results in a single page"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image listing"
          schema:
            $ref: "#/definitions/PaginatedImageList"
        400:
          description: "Bad filter parameters"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listImages"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.query"
  /query/images/by_vulnerability:
    get:
      tags:
      - "Vulnerabilities"
      - "Queries"
      summary: "List images vulnerable to the specific vulnerability ID."
      description: "Returns a listing of images and their respective packages vulnerable\
        \ to the given vulnerability ID"
      operationId: "query_images_by_vulnerability"
      parameters:
      - name: "vulnerability_id"
        in: "query"
        description: "The ID of the vulnerability to search for within all images\
          \ stored in anchore-engine (e.g. CVE-1999-0001)"
        required: true
        type: "string"
        x-exportParamName: "VulnerabilityId"
      - name: "namespace"
        in: "query"
        description: "Filter results to images within the given vulnerability namespace\
          \ (e.g. debian:8, ubuntu:14.04)"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
        x-optionalDataType: "String"
      - name: "affected_package"
        in: "query"
        description: "Filter results to images with vulnable packages with the given\
          \ package name (e.g. libssl)"
        required: false
        type: "string"
        x-exportParamName: "AffectedPackage"
        x-optionalDataType: "String"
      - name: "severity"
        in: "query"
        description: "Filter results to vulnerable package/vulnerability with the\
          \ given severity"
        required: false
        type: "string"
        enum:
        - "Unknown"
        - "Negligible"
        - "Low"
        - "Medium"
        - "High"
        - "Critical"
        x-exportParamName: "Severity"
        x-optionalDataType: "String"
      - name: "vendor_only"
        in: "query"
        description: "Filter results to include only vulnerabilities that are not\
          \ marked as invalid by upstream OS vendor data"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "VendorOnly"
        x-optionalDataType: "Bool"
      - name: "page"
        in: "query"
        description: "The page of results to fetch. Pages start at 1"
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Limit the number of records for the requested page. If omitted\
          \ or set to 0, return all results in a single page"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Image lookup success"
          schema:
            $ref: "#/definitions/PaginatedVulnerableImageList"
        400:
          description: "Invalid filter parameters"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listImages"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.query"
  /query/vulnerabilities:
    get:
      tags:
      - "Vulnerabilities"
      - "Queries"
      summary: "Listing information about given vulnerability"
      description: "List (w/filters) vulnerability records known by the system, with\
        \ affected packages information if present"
      operationId: "query_vulnerabilities"
      parameters:
      - name: "id"
        in: "query"
        description: "The ID of the vulnerability (e.g. CVE-1999-0001)"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "affected_package"
        in: "query"
        description: "Filter results by specified package name (e.g. sed)"
        required: false
        type: "string"
        x-exportParamName: "AffectedPackage"
        x-optionalDataType: "String"
      - name: "affected_package_version"
        in: "query"
        description: "Filter results by specified package version (e.g. 4.4-1)"
        required: false
        type: "string"
        x-exportParamName: "AffectedPackageVersion"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page of results to fetch. Pages start at 1"
        required: false
        type: "string"
        default: "1"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limit the number of records for the requested page. If omitted\
          \ or set to 0, return all results in a single page"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Vulnerability listing paginated"
          schema:
            $ref: "#/definitions/PaginatedVulnerabilityList"
        400:
          description: "Invalid filter parameters"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.query"
  /registries:
    get:
      tags:
      - "Registries"
      summary: "List configured registries"
      description: "List all configured registries the system can/will watch"
      operationId: "list_registries"
      parameters:
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Registry listing"
          schema:
            $ref: "#/definitions/RegistryConfigurationList"
      x-anchore-authz-action: "listRegistries"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.registries"
    post:
      tags:
      - "Registries"
      summary: "Add a new registry"
      description: "Adds a new registry to the system"
      operationId: "create_registry"
      parameters:
      - name: "validate"
        in: "query"
        description: "flag to determine whether or not to validate registry/credential\
          \ at registry add time"
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "registrydata"
        required: true
        schema:
          $ref: "#/definitions/RegistryConfigurationRequest"
        x-exportParamName: "Registrydata"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Saved registry configuration"
          schema:
            $ref: "#/definitions/RegistryConfigurationList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "createRegistry"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.registries"
  /registries/{registry}:
    get:
      tags:
      - "Registries"
      summary: "Get a specific registry configuration"
      description: "Get information on a specific registry"
      operationId: "get_registry"
      parameters:
      - name: "registry"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Registry"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Registry configuration"
          schema:
            $ref: "#/definitions/RegistryConfiguration"
      x-anchore-authz-action: "getRegistry"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.registries"
    put:
      tags:
      - "Registries"
      summary: "Update/replace a registry configuration"
      description: "Replaces an existing registry record with the given record"
      operationId: "update_registry"
      parameters:
      - name: "registry"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Registry"
      - name: "validate"
        in: "query"
        description: "flag to determine whether or not to validate registry/credential\
          \ at registry update time"
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "registrydata"
        required: true
        schema:
          $ref: "#/definitions/RegistryConfigurationRequest"
        x-exportParamName: "Registrydata"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Updated registry configuration"
          schema:
            $ref: "#/definitions/RegistryConfigurationList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updateRegistry"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.registries"
    delete:
      tags:
      - "Registries"
      summary: "Delete a registry configuration"
      description: "Delete a registry configuration record from the system. Does not\
        \ remove any images."
      operationId: "delete_registry"
      parameters:
      - name: "registry"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Registry"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Delete success"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteRegistry"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.registries"
  /repositories:
    post:
      tags:
      - "Repository Credentials"
      summary: "Add repository to watch"
      description: ""
      operationId: "add_repository"
      parameters:
      - name: "repository"
        in: "query"
        description: "full repository to add e.g. docker.io/library/alpine"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "autosubscribe"
        in: "query"
        description: "flag to enable/disable auto tag_update activation when new images\
          \ from a repo are added"
        required: false
        type: "boolean"
        x-exportParamName: "Autosubscribe"
        x-optionalDataType: "Bool"
      - name: "lookuptag"
        in: "query"
        description: "use specified existing tag to perform repo scan (default is\
          \ 'latest')"
        required: false
        type: "string"
        x-exportParamName: "Lookuptag"
        x-optionalDataType: "String"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Repository and discovered tags added"
          schema:
            $ref: "#/definitions/SubscriptionList"
      x-anchore-authz-action: "createRepository"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /status:
    get:
      tags:
      - "System"
      summary: "Service status"
      description: "Get the API service status"
      operationId: "get_status"
      parameters: []
      responses:
        200:
          description: "Status listing"
          schema:
            $ref: "#/definitions/StatusResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /subscriptions:
    get:
      tags:
      - "Subscriptions"
      summary: "List all subscriptions"
      operationId: "list_subscriptions"
      parameters:
      - name: "subscription_key"
        in: "query"
        description: "filter only subscriptions matching key"
        required: false
        type: "string"
        x-exportParamName: "SubscriptionKey"
        x-optionalDataType: "String"
      - name: "subscription_type"
        in: "query"
        description: "filter only subscriptions matching type"
        required: false
        type: "string"
        x-exportParamName: "SubscriptionType"
        x-optionalDataType: "String"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Subscription listing"
          schema:
            $ref: "#/definitions/SubscriptionList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listSubscriptions"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.subscriptions"
    post:
      tags:
      - "Subscriptions"
      summary: "Add a subscription of a specific type"
      description: "Create a new subscription to watch a tag and get notifications\
        \ of changes"
      operationId: "add_subscription"
      parameters:
      - in: "body"
        name: "subscription"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionRequest"
        x-exportParamName: "Subscription"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Subscription add success"
          schema:
            $ref: "#/definitions/SubscriptionList"
      x-anchore-authz-action: "createSubscription"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.subscriptions"
  /subscriptions/{subscriptionId}:
    get:
      tags:
      - "Subscriptions"
      summary: "Get a specific subscription set"
      operationId: "get_subscription"
      parameters:
      - name: "subscriptionId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Filtered subscription list by type"
          schema:
            $ref: "#/definitions/SubscriptionList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getSubscription"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.subscriptions"
    put:
      tags:
      - "Subscriptions"
      summary: "Update an existing and specific subscription"
      operationId: "update_subscription"
      parameters:
      - name: "subscriptionId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      - in: "body"
        name: "subscription"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionUpdate"
        x-exportParamName: "Subscription"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Subscription add success"
          schema:
            $ref: "#/definitions/SubscriptionList"
      x-anchore-authz-action: "updateSubscription"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.subscriptions"
    delete:
      tags:
      - "Subscriptions"
      summary: "Delete subscriptions of a specific type"
      operationId: "delete_subscription"
      parameters:
      - name: "subscriptionId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Delete success"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteSubscription"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.subscriptions"
  /summaries/imagetags:
    get:
      tags:
      - "Summaries"
      summary: "List all visible image digests and tags"
      description: "List all image tags visible to the user"
      operationId: "list_imagetags"
      parameters:
      - name: "x-anchore-account"
        in: "header"
        description: "An account name to change the resource scope of the request\
          \ to that account, if permissions allow (admin only)"
        required: false
        type: "string"
        x-exportParamName: "XAnchoreAccount"
        x-optionalDataType: "String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AnchoreImageTagSummaryList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listImages"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.images"
  /system:
    get:
      tags:
      - "System"
      summary: "System status"
      description: "Get the system status including queue lengths"
      operationId: "get_service_detail"
      parameters: []
      responses:
        200:
          description: "Status listing"
          schema:
            $ref: "#/definitions/SystemStatusResponse"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /system/feeds:
    get:
      tags:
      - "System"
      summary: "list feeds operations and information"
      description: ""
      operationId: "get_system_feeds"
      parameters: []
      responses:
        200:
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FeedMetadata"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listFeeds"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
    post:
      tags:
      - "System"
      summary: "trigger feeds operations"
      description: ""
      operationId: "post_system_feeds"
      parameters:
      - name: "flush"
        in: "query"
        description: "instruct system to flush existing data feeds records from anchore-engine"
        required: false
        type: "boolean"
        x-exportParamName: "Flush"
        x-optionalDataType: "Bool"
      - name: "sync"
        in: "query"
        description: "instruct system to re-sync data feeds"
        required: false
        type: "boolean"
        x-exportParamName: "Sync"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Feeds operation success"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "updateFeeds"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /system/policy_spec:
    get:
      tags:
      - "System"
      - "Policy"
      summary: "Describe the policy language spec implemented by this service."
      description: "Get the policy language spec for this service"
      operationId: "describe_policy"
      parameters: []
      responses:
        200:
          description: "Policy Language Description"
          schema:
            type: "array"
            description: "List of Gate specifications"
            items:
              $ref: "#/definitions/GateSpec"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /system/services:
    get:
      tags:
      - "System"
      - "Services"
      summary: "List system services"
      operationId: "list_services"
      parameters: []
      responses:
        200:
          description: "Service listing"
          schema:
            $ref: "#/definitions/ServiceList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "listServices"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /system/services/{servicename}:
    get:
      tags:
      - "System"
      - "Services"
      summary: "Get a service configuration and state"
      operationId: "get_services_by_name"
      parameters:
      - name: "servicename"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Servicename"
      responses:
        200:
          description: "Service Info"
          schema:
            $ref: "#/definitions/ServiceList"
        500:
          description: "Internal Error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getService"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /system/services/{servicename}/{hostid}:
    get:
      tags:
      - "System"
      - "Services"
      summary: "Get service config for a specific host"
      operationId: "get_services_by_name_and_host"
      parameters:
      - name: "servicename"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Servicename"
      - name: "hostid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Hostid"
      responses:
        200:
          description: "Listing of registered services"
          schema:
            $ref: "#/definitions/ServiceList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "getService"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
    delete:
      tags:
      - "System"
      - "Services"
      summary: "Delete the service config"
      operationId: "delete_service"
      parameters:
      - name: "servicename"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Servicename"
      - name: "hostid"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Hostid"
      responses:
        200:
          description: "Delete success"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "deleteService"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
  /user:
    get:
      tags:
      - "Identity"
      summary: "List authenticated user info"
      operationId: "get_user"
      parameters: []
      responses:
        200:
          description: "User details for caller's user"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.user"
  /user/credentials:
    get:
      tags:
      - "Identity"
      summary: "Get current credential summary"
      operationId: "get_credentials"
      parameters: []
      responses:
        200:
          description: "User credential listing"
          schema:
            $ref: "#/definitions/CredentialList"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.user"
    post:
      tags:
      - "Identity"
      summary: "add/replace credential"
      operationId: "add_credential"
      parameters:
      - in: "body"
        name: "credential"
        required: true
        schema:
          $ref: "#/definitions/AccessCredential"
        x-exportParamName: "Credential"
      responses:
        200:
          description: "Add a credential, overwritting if already exists"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Internal error"
          schema:
            $ref: "#/definitions/ApiErrorResponse"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.user"
  /version:
    get:
      description: "Returns the version object for the service, including db schema\
        \ version info"
      operationId: "version_noop"
      parameters: []
      responses:
        200:
          description: "Version object describing version state"
          schema:
            $ref: "#/definitions/ServiceVersion"
      x-anchore-authz-action: "None"
      x-swagger-router-controller: "anchore_engine.services.apiext.api.controllers.system"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  AccessCredential:
    type: "object"
    required:
    - "type"
    - "value"
    properties:
      created_at:
        type: "string"
        description: "The timestamp of creation of the credential"
      type:
        type: "string"
        description: "The type of credential"
        enum:
        - "password"
      value:
        type: "string"
        description: "The credential value (e.g. the password)"
    description: "A login credential mapped to a user identity. For password credentials,\
      \ the username to present for Basic auth is the user's username from the user\
      \ record"
    example:
      created_at: "created_at"
      type: "password"
      value: "value"
  Account:
    type: "object"
    required:
    - "name"
    properties:
      created_at:
        type: "string"
        format: "date-time"
        description: "The timestamp when the account was created"
      email:
        type: "string"
        description: "Optional email address associated with the account"
      last_updated:
        type: "string"
        format: "date-time"
        description: "The timestamp of the last update to the account metadata itself\
          \ (not users or creds)"
      name:
        type: "string"
        description: "The account identifier, not updatable after creation"
      state:
        type: "string"
        description: "State of the account. Disabled accounts prevent member users\
          \ from logging in, deleting accounts are disabled and pending deletion and\
          \ will be removed once all owned resources are garbage collected by the\
          \ system"
        enum:
        - "enabled"
        - "disabled"
        - "deleting"
      type:
        type: "string"
        description: "The user type (admin vs user). If not specified in a POST request,\
          \ 'user' is default"
        enum:
        - "user"
        - "admin"
        - "service"
    description: "Account information"
    example:
      last_updated: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      created_at: "2000-01-23T04:56:07.000+00:00"
      state: "enabled"
      type: "user"
      email: "email"
  AccountCreationRequest:
    type: "object"
    required:
    - "name"
    properties:
      email:
        type: "string"
        description: "An optional email to associate with the account for contact\
          \ purposes"
        pattern: "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\
          .)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?"
      name:
        type: "string"
        description: "The account name to use. This will identify the account and\
          \ must be globally unique in the system."
        pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]{1,126}[a-zA-Z0-9]$"
    description: "An account to create/add to the system. If already exists will return\
      \ 400."
    example:
      name: "name"
      email: "email"
  AccountList:
    type: "array"
    items:
      $ref: "#/definitions/Account"
  AccountStatus:
    type: "object"
    properties:
      state:
        type: "string"
        description: "The status of the account"
        enum:
        - "enabled"
        - "disabled"
    description: "A summary of account status"
    example:
      state: "enabled"
  AnchoreImage:
    type: "object"
    properties:
      analysis_status:
        type: "string"
        description: "A state value for the current status of the analysis progress\
          \ of the image"
        enum:
        - "not_analyzed"
        - "analyzing"
        - "analyzed"
        - "analysis_failed"
      created_at:
        type: "string"
        format: "date-time"
      imageDigest:
        type: "string"
      image_content:
        $ref: "#/definitions/ImageContent"
      image_detail:
        type: "array"
        description: "Details specific to an image reference and type such as tag\
          \ and image source"
        items:
          $ref: "#/definitions/ImageDetail"
      image_status:
        type: "string"
        description: "State of the image"
        enum:
        - "active"
        - "inactive"
        - "disabled"
      last_updated:
        type: "string"
        format: "date-time"
      userId:
        type: "string"
    description: "A unique image in the engine. May have multiple tags or references.\
      \ Unique to an image content across registries or repositories."
  AnchoreImageList:
    type: "array"
    description: "A list of Anchore Images"
    items:
      $ref: "#/definitions/AnchoreImage"
  AnchoreImageTagSummary:
    type: "object"
    properties:
      analysis_status:
        type: "string"
      analyzed_at:
        type: "integer"
      created_at:
        type: "integer"
      fulltag:
        type: "string"
      imageDigest:
        type: "string"
      imageId:
        type: "string"
      tag_detected_at:
        type: "integer"
    description: "A unique image in the engine."
  AnchoreImageTagSummaryList:
    type: "array"
    description: "a list of AnchoreImageTagSummary objects"
    items:
      $ref: "#/definitions/AnchoreImageTagSummary"
  ApiErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      detail:
        type: "object"
        description: "Details structure for additional information about the error\
          \ if available. Content and structure will be error specific."
        properties: {}
      error_type:
        type: "string"
      message:
        type: "string"
    description: "Generic HTTP API error response"
  ContentFilesResponse:
    type: "object"
    properties:
      content:
        type: "array"
        items:
          $ref: "#/definitions/ContentFilesResponse_content"
      content_type:
        type: "string"
      imageDigest:
        type: "string"
    description: "File content listings from images"
    example:
      content_type: "content_type"
      content:
      - mode: "mode"
        uid: 1
        filename: "filename"
        gid: 0
        sha256: "sha256"
        size: 6
        linkdest: "linkdest"
        type: "type"
      - mode: "mode"
        uid: 1
        filename: "filename"
        gid: 0
        sha256: "sha256"
        size: 6
        linkdest: "linkdest"
        type: "type"
      imageDigest: "imageDigest"
  ContentJAVAPackageResponse:
    type: "object"
    properties:
      content:
        type: "array"
        items:
          $ref: "#/definitions/ContentJAVAPackageResponse_content"
      content_type:
        type: "string"
      imageDigest:
        type: "string"
    description: "Java package content listings from images"
    example:
      content_type: "content_type"
      content:
      - package: "package"
        implementation-version: "implementation-version"
        origin: "origin"
        maven-version: "maven-version"
        location: "location"
        type: "type"
        specification-version: "specification-version"
      - package: "package"
        implementation-version: "implementation-version"
        origin: "origin"
        maven-version: "maven-version"
        location: "location"
        type: "type"
        specification-version: "specification-version"
      imageDigest: "imageDigest"
  ContentPackageResponse:
    type: "object"
    properties:
      content:
        type: "array"
        items:
          $ref: "#/definitions/ContentPackageResponse_content"
      content_type:
        type: "string"
      imageDigest:
        type: "string"
    description: "Package content listings from images"
    example:
      content_type: "content_type"
      content:
      - license: "license"
        package: "package"
        size: "size"
        origin: "origin"
        location: "location"
        type: "type"
        version: "version"
      - license: "license"
        package: "package"
        size: "size"
        origin: "origin"
        location: "location"
        type: "type"
        version: "version"
      imageDigest: "imageDigest"
  ContentResponse:
    type: "object"
    properties:
      content:
        type: "array"
        items:
          type: "object"
          properties: {}
      content_type:
        type: "string"
      imageDigest:
        type: "string"
    description: "Generic wrapper for content listings from images"
  CredentialList:
    type: "array"
    items:
      $ref: "#/definitions/AccessCredential"
  EventResponse:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
      event:
        $ref: "#/definitions/EventResponse_event"
      generated_uuid:
        type: "string"
    description: "A record of occurance of an asynchronous event triggered either\
      \ by system or by user activity"
    example:
      generated_uuid: "generated_uuid"
      created_at: "2000-01-23T04:56:07.000+00:00"
      event:
        level: "level"
        resource:
          user_id: "user_id"
          id: "id"
          type: "type"
        details: "{}"
        source:
          base_url: "base_url"
          hostid: "hostid"
          servicename: "servicename"
          request_id: "request_id"
        message: "message"
        type: "type"
        timestamp: "2000-01-23T04:56:07.000+00:00"
  EventsList:
    type: "object"
    properties:
      item_count:
        type: "integer"
        description: "Number of events in this page"
      next_page:
        type: "boolean"
        description: "Boolean flag, True indicates there are more events and False\
          \ otherwise"
      page:
        type: "integer"
        description: "Page number of this result set"
      results:
        type: "array"
        description: "List of events"
        items:
          $ref: "#/definitions/EventResponse"
    description: "Response envelope for paginated listing of events"
    example:
      item_count: 0
      next_page: true
      page: 6
      results:
      - generated_uuid: "generated_uuid"
        created_at: "2000-01-23T04:56:07.000+00:00"
        event:
          level: "level"
          resource:
            user_id: "user_id"
            id: "id"
            type: "type"
          details: "{}"
          source:
            base_url: "base_url"
            hostid: "hostid"
            servicename: "servicename"
            request_id: "request_id"
          message: "message"
          type: "type"
          timestamp: "2000-01-23T04:56:07.000+00:00"
      - generated_uuid: "generated_uuid"
        created_at: "2000-01-23T04:56:07.000+00:00"
        event:
          level: "level"
          resource:
            user_id: "user_id"
            id: "id"
            type: "type"
          details: "{}"
          source:
            base_url: "base_url"
            hostid: "hostid"
            servicename: "servicename"
            request_id: "request_id"
          message: "message"
          type: "type"
          timestamp: "2000-01-23T04:56:07.000+00:00"
  FeedGroupMetadata:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
      last_sync:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      record_count:
        type: "integer"
    example:
      record_count: 0
      last_sync: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      created_at: "2000-01-23T04:56:07.000+00:00"
  FeedMetadata:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
        description: "Date the metadata record was created in engine (first seen on\
          \ source)"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/FeedGroupMetadata"
      last_full_sync:
        type: "string"
        format: "date-time"
      name:
        type: "string"
        description: "name of the feed"
      updated_at:
        type: "string"
        format: "date-time"
        description: "Date the metadata was last updated"
    description: "Metadata on a single feed based on what the engine finds from querying\
      \ the endpoints"
    example:
      last_full_sync: "2000-01-23T04:56:07.000+00:00"
      updated_at: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      created_at: "2000-01-23T04:56:07.000+00:00"
      groups:
      - record_count: 0
        last_sync: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
      - record_count: 0
        last_sync: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        created_at: "2000-01-23T04:56:07.000+00:00"
  GateSpec:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Description of the gate"
      name:
        type: "string"
        description: "Gate name, as it would appear in a policy document"
      state:
        type: "string"
        description: "State of the gate and transitively all triggers it contains\
          \ if not 'active'"
        enum:
        - "active"
        - "deprecated"
        - "eol"
      superceded_by:
        type: "string"
        description: "The name of another trigger that supercedes this on functionally\
          \ if this is deprecated"
        x-nullable: true
      triggers:
        type: "array"
        description: "List of the triggers that can fire for this Gate"
        items:
          $ref: "#/definitions/TriggerSpec"
    description: "A description of the set of gates available in this engine and the\
      \ triggers and parameters supported"
    example:
      name: "name"
      description: "description"
      superceded_by: "superceded_by"
      state: "active"
      triggers:
      - name: "name"
        description: "description"
        superceded_by: "superceded_by"
        state: "active"
        parameters:
        - name: "name"
          validator: "{}"
          description: "description"
          superceded_by: "superceded_by"
          state: "active"
          required: true
          example: "example"
        - name: "name"
          validator: "{}"
          description: "description"
          superceded_by: "superceded_by"
          state: "active"
          required: true
          example: "example"
      - name: "name"
        description: "description"
        superceded_by: "superceded_by"
        state: "active"
        parameters:
        - name: "name"
          validator: "{}"
          description: "description"
          superceded_by: "superceded_by"
          state: "active"
          required: true
          example: "example"
        - name: "name"
          validator: "{}"
          description: "description"
          superceded_by: "superceded_by"
          state: "active"
          required: true
          example: "example"
  ImageAnalysisReport:
    type: "object"
    description: "Analysis report json to be imported"
  ImageAnalysisRequest:
    type: "object"
    required:
    - "tag"
    properties:
      annotations:
        type: "object"
        description: "Annotations to be associated with the added image in key/value\
          \ form"
        properties: {}
      created_at:
        type: "string"
        format: "date-time"
        description: "Optional override of the image creation time, only honored when\
          \ both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z"
      digest:
        type: "string"
        description: "A full pullable digest reference for an image. e.g. docker.io/nginx@sha256:abc123"
      dockerfile:
        type: "string"
        description: "Content of the dockerfile for the image, if available"
      image_type:
        type: "string"
        description: "The type of image this is adding, defaults to \"docker\""
      tag:
        type: "string"
        description: "Full pullable tag reference for image. e.g. docker.io/nginx:latest"
    description: "A request to add an image to be watched and analyzed by the engine.\
      \ Optionally include the dockerfile content. Either digest or tag must be present"
    example:
      dockerfile: "dockerfile"
      digest: "digest"
      annotations: "{}"
      created_at: "2000-01-23T04:56:07.000+00:00"
      tag: "tag"
      image_type: "image_type"
  ImageContent:
    type: "object"
    description: "A metadata content record for a specific image, containing different\
      \ content type entries"
  ImageDetail:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
      dockerfile:
        type: "string"
        x-nullable: true
      fulldigest:
        type: "string"
        description: "Full docker-pullable digest string including the registry url\
          \ and repository necessary get the image"
      fulltag:
        type: "string"
        description: "Full docker-pullalbe tag string referencing the image"
      imageDigest:
        type: "string"
        description: "The parent Anchore Image record to which this detail maps"
      imageId:
        type: "string"
      last_updated:
        type: "string"
        format: "date-time"
      registry:
        type: "string"
      repo:
        type: "string"
      userId:
        type: "string"
    description: "A metadata detail record for a specific image. Multiple detail records\
      \ may map a single catalog image."
  ImageFilter:
    type: "object"
    properties:
      digest:
        type: "string"
      tag:
        type: "string"
    description: "Filter for an image list by id, tag, or digest, but not both"
    example:
      digest: "digest"
      tag: "tag"
  ImageRef:
    type: "object"
    required:
    - "type"
    - "value"
    properties:
      type:
        type: "string"
        enum:
        - "tag"
        - "digest"
        - "id"
      value:
        type: "string"
    description: "A reference to an image"
    example:
      type: "tag"
      value: "value"
  ImageReference:
    type: "object"
    properties:
      analyzed_at:
        type: "string"
        description: "Timestamp, in rfc3339 format, indicating when the image state\
          \ became 'analyzed' in Anchore Engine."
      digest:
        type: "string"
        description: "The image digest"
      id:
        type: "string"
        description: "The image id if available"
      tag_history:
        type: "array"
        items:
          $ref: "#/definitions/TagEntry"
    description: "A summary of an image identity, including digest, id (if available),\
      \ and any tags known to have ever been mapped to the digest"
  ImageSelectionRule:
    type: "object"
    required:
    - "image"
    - "name"
    - "registry"
    - "repository"
    properties:
      id:
        type: "string"
      image:
        $ref: "#/definitions/ImageRef"
      name:
        type: "string"
      registry:
        type: "string"
      repository:
        type: "string"
    example:
      image:
        type: "tag"
        value: "value"
      registry: "registry"
      name: "name"
      id: "id"
      repository: "repository"
  ImageWithPackages:
    type: "object"
    properties:
      image:
        $ref: "#/definitions/ImageReference"
      packages:
        type: "array"
        items:
          $ref: "#/definitions/PackageReference"
    description: "An image record that contains packages"
  MappingRule:
    type: "object"
    required:
    - "image"
    - "name"
    - "registry"
    - "repository"
    properties:
      id:
        type: "string"
      image:
        $ref: "#/definitions/ImageRef"
      name:
        type: "string"
      policy_id:
        type: "string"
        description: "Optional single policy to evalute, if set will override any\
          \ value in policy_ids, for backwards compatibility. Generally, policy_ids\
          \ should be used even with a array of length 1."
      policy_ids:
        type: "array"
        description: "List of policyIds to evaluate in order, to completion"
        items:
          type: "string"
          description: "PolicyId to evaluate"
      registry:
        type: "string"
      repository:
        type: "string"
      whitelist_ids:
        type: "array"
        items:
          type: "string"
    example:
      image:
        type: "tag"
        value: "value"
      registry: "registry"
      whitelist_ids:
      - "whitelist_ids"
      - "whitelist_ids"
      policy_id: "policy_id"
      name: "name"
      id: "id"
      policy_ids:
      - "policy_ids"
      - "policy_ids"
      repository: "repository"
  MetadataResponse:
    type: "object"
    properties:
      imageDigest:
        type: "string"
      metadata: {}
      metadata_type:
        type: "string"
    description: "Generic wrapper for metadata listings from images"
    example:
      metadata: ""
      metadata_type: "metadata_type"
      imageDigest: "imageDigest"
  PackageReference:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Package name"
      type:
        type: "string"
        description: "Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)"
      version:
        type: "string"
        description: "A version for the package. If null, then references all versions"
        x-nullable: true
    description: "A record of a software item which is vulnerable or carries a fix\
      \ for a vulnerability"
  PaginatedImageList:
    allOf:
    - $ref: "#/definitions/PaginationProperties"
    - type: "object"
      properties:
        images:
          type: "array"
          items:
            $ref: "#/definitions/ImageWithPackages"
    description: "Pagination wrapped list of images that match some filter"
  PaginatedVulnerabilityList:
    allOf:
    - $ref: "#/definitions/PaginationProperties"
    - type: "object"
      properties:
        vulnerabilities:
          type: "array"
          description: "The listing of matching vulnerabilities for the query subject\
            \ to pagination"
          items:
            $ref: "#/definitions/StandaloneVulnerability"
    description: "A paginated listing of vulnerability records sorted by ID in descending\
      \ order"
  PaginatedVulnerableImageList:
    allOf:
    - $ref: "#/definitions/PaginationProperties"
    - type: "object"
      properties:
        images:
          type: "array"
          items:
            $ref: "#/definitions/VulnerableImage"
    description: "Pagination wrapped list of images with vulnerabilties that match\
      \ some filter"
  PaginationProperties:
    type: "object"
    properties:
      next_page:
        type: "string"
        description: "True if additional pages exist (page + 1) or False if this is\
          \ the last page"
      page:
        type: "string"
        description: "The page number returned (should match the requested page query\
          \ string param)"
      returned_count:
        type: "integer"
        description: "The number of items sent in this response"
    description: "Properties for common pagination handling to be included in any\
      \ wrapping object that needs pagination elements"
  Policy:
    type: "object"
    required:
    - "id"
    - "version"
    properties:
      comment:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/PolicyRule"
      version:
        type: "string"
    example:
      name: "name"
      comment: "comment"
      rules:
      - action: "GO"
        gate: "gate"
        id: "id"
        trigger: "trigger"
        params:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      - action: "GO"
        gate: "gate"
        id: "id"
        trigger: "trigger"
        params:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      id: "id"
      version: "version"
  PolicyBundle:
    type: "object"
    required:
    - "id"
    - "mappings"
    - "policies"
    - "version"
    properties:
      blacklisted_images:
        type: "array"
        description: "List of mapping rules that define which images should always\
          \ result in a STOP/FAIL policy result regardless of policy content or presence\
          \ in whitelisted_images"
        items:
          $ref: "#/definitions/ImageSelectionRule"
      comment:
        type: "string"
        description: "Description of the bundle, human readable"
      id:
        type: "string"
        description: "Id of the bundle"
      mappings:
        type: "array"
        description: "Mapping rules for defining which policy and whitelist(s) to\
          \ apply to an image based on a match of the image tag or id. Evaluated in\
          \ order."
        items:
          $ref: "#/definitions/MappingRule"
      name:
        type: "string"
        description: "Human readable name for the bundle"
      policies:
        type: "array"
        description: "Policies which define the go/stop/warn status of an image using\
          \ rule matches on image properties"
        items:
          $ref: "#/definitions/Policy"
      version:
        type: "string"
        description: "Version id for this bundle format"
      whitelisted_images:
        type: "array"
        description: "List of mapping rules that define which images should always\
          \ be passed (unless also on the blacklist), regardless of policy result."
        items:
          $ref: "#/definitions/ImageSelectionRule"
      whitelists:
        type: "array"
        description: "Whitelists which define which policy matches to disregard explicitly\
          \ in the final policy decision"
        items:
          $ref: "#/definitions/Whitelist"
    description: "A bundle containing a set of policies, whitelists, and rules for\
      \ mapping them to specific images"
    example:
      blacklisted_images:
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        name: "name"
        id: "id"
        repository: "repository"
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        name: "name"
        id: "id"
        repository: "repository"
      mappings:
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        whitelist_ids:
        - "whitelist_ids"
        - "whitelist_ids"
        policy_id: "policy_id"
        name: "name"
        id: "id"
        policy_ids:
        - "policy_ids"
        - "policy_ids"
        repository: "repository"
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        whitelist_ids:
        - "whitelist_ids"
        - "whitelist_ids"
        policy_id: "policy_id"
        name: "name"
        id: "id"
        policy_ids:
        - "policy_ids"
        - "policy_ids"
        repository: "repository"
      whitelists:
      - name: "name"
        comment: "comment"
        id: "id"
        items:
        - trigger_id: "trigger_id"
          gate: "gate"
          id: "id"
        - trigger_id: "trigger_id"
          gate: "gate"
          id: "id"
        version: "version"
      - name: "name"
        comment: "comment"
        id: "id"
        items:
        - trigger_id: "trigger_id"
          gate: "gate"
          id: "id"
        - trigger_id: "trigger_id"
          gate: "gate"
          id: "id"
        version: "version"
      name: "name"
      policies:
      - name: "name"
        comment: "comment"
        rules:
        - action: "GO"
          gate: "gate"
          id: "id"
          trigger: "trigger"
          params:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        - action: "GO"
          gate: "gate"
          id: "id"
          trigger: "trigger"
          params:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        id: "id"
        version: "version"
      - name: "name"
        comment: "comment"
        rules:
        - action: "GO"
          gate: "gate"
          id: "id"
          trigger: "trigger"
          params:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        - action: "GO"
          gate: "gate"
          id: "id"
          trigger: "trigger"
          params:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        id: "id"
        version: "version"
      whitelisted_images:
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        name: "name"
        id: "id"
        repository: "repository"
      - image:
          type: "tag"
          value: "value"
        registry: "registry"
        name: "name"
        id: "id"
        repository: "repository"
      comment: "comment"
      id: "id"
      version: "version"
  PolicyBundleList:
    type: "array"
    description: "List of PolicyBundleRecord objects"
    items:
      $ref: "#/definitions/PolicyBundleRecord"
  PolicyBundleRecord:
    type: "object"
    properties:
      active:
        type: "boolean"
        description: "True if the bundle is currently defined to be used automatically"
      created_at:
        type: "string"
        format: "date-time"
      last_updated:
        type: "string"
        format: "date-time"
      policyId:
        type: "string"
        description: "The bundle's identifier"
      policy_source:
        type: "string"
        description: "Source location of where the policy bundle originated"
      policybundle:
        $ref: "#/definitions/PolicyBundle"
      userId:
        type: "string"
        description: "UserId of the user that owns the bundle"
    description: "A policy bundle plus some metadata"
    example:
      policybundle:
        blacklisted_images:
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          name: "name"
          id: "id"
          repository: "repository"
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          name: "name"
          id: "id"
          repository: "repository"
        mappings:
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          whitelist_ids:
          - "whitelist_ids"
          - "whitelist_ids"
          policy_id: "policy_id"
          name: "name"
          id: "id"
          policy_ids:
          - "policy_ids"
          - "policy_ids"
          repository: "repository"
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          whitelist_ids:
          - "whitelist_ids"
          - "whitelist_ids"
          policy_id: "policy_id"
          name: "name"
          id: "id"
          policy_ids:
          - "policy_ids"
          - "policy_ids"
          repository: "repository"
        whitelists:
        - name: "name"
          comment: "comment"
          id: "id"
          items:
          - trigger_id: "trigger_id"
            gate: "gate"
            id: "id"
          - trigger_id: "trigger_id"
            gate: "gate"
            id: "id"
          version: "version"
        - name: "name"
          comment: "comment"
          id: "id"
          items:
          - trigger_id: "trigger_id"
            gate: "gate"
            id: "id"
          - trigger_id: "trigger_id"
            gate: "gate"
            id: "id"
          version: "version"
        name: "name"
        policies:
        - name: "name"
          comment: "comment"
          rules:
          - action: "GO"
            gate: "gate"
            id: "id"
            trigger: "trigger"
            params:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          - action: "GO"
            gate: "gate"
            id: "id"
            trigger: "trigger"
            params:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          id: "id"
          version: "version"
        - name: "name"
          comment: "comment"
          rules:
          - action: "GO"
            gate: "gate"
            id: "id"
            trigger: "trigger"
            params:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          - action: "GO"
            gate: "gate"
            id: "id"
            trigger: "trigger"
            params:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          id: "id"
          version: "version"
        whitelisted_images:
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          name: "name"
          id: "id"
          repository: "repository"
        - image:
            type: "tag"
            value: "value"
          registry: "registry"
          name: "name"
          id: "id"
          repository: "repository"
        comment: "comment"
        id: "id"
        version: "version"
      policy_source: "policy_source"
      last_updated: "2000-01-23T04:56:07.000+00:00"
      policyId: "policyId"
      active: true
      created_at: "2000-01-23T04:56:07.000+00:00"
      userId: "userId"
  PolicyEvaluation:
    type: "object"
    description: "Evaluation response object"
  PolicyEvaluationList:
    type: "array"
    description: "Evaluation response object"
    items:
      $ref: "#/definitions/PolicyEvaluation"
  PolicyRule:
    type: "object"
    required:
    - "action"
    - "gate"
    - "trigger"
    properties:
      action:
        type: "string"
        enum:
        - "GO"
        - "STOP"
        - "WARN"
      gate:
        type: "string"
      id:
        type: "string"
      params:
        type: "array"
        items:
          $ref: "#/definitions/PolicyRule_params"
      trigger:
        type: "string"
    description: "A rule that defines and decision value if the match is found true\
      \ for a given image."
    example:
      action: "GO"
      gate: "gate"
      id: "id"
      trigger: "trigger"
      params:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  RegistryConfiguration:
    type: "object"
    properties:
      created_at:
        type: "string"
        format: "date-time"
      last_upated:
        type: "string"
        format: "date-time"
      registry:
        type: "string"
        description: "hostname:port string for accessing the registry, as would be\
          \ used in a docker pull operation"
      registry_type:
        type: "string"
        description: "Type of registry"
      registry_user:
        type: "string"
        description: "Username portion of credential to use for this registry"
      registry_verify:
        type: "boolean"
        description: "Use TLS/SSL verification for the registry URL"
      userId:
        type: "string"
        description: "Engine user that owns this registry entry"
    description: "A registry entry describing the endpoint and credentials for a registry\
      \ to pull images from"
    example:
      registry: "registry"
      last_upated: "2000-01-23T04:56:07.000+00:00"
      registry_type: "registry_type"
      registry_user: "registry_user"
      created_at: "2000-01-23T04:56:07.000+00:00"
      registry_verify: true
      userId: "userId"
  RegistryConfigurationList:
    type: "array"
    description: "List of registry configurations"
    items:
      $ref: "#/definitions/RegistryConfiguration"
  RegistryConfigurationRequest:
    type: "object"
    properties:
      registry:
        type: "string"
        description: "hostname:port string for accessing the registry, as would be\
          \ used in a docker pull operation"
      registry_pass:
        type: "string"
        description: "Password portion of credential to use for this registry"
      registry_type:
        type: "string"
        description: "Type of registry"
      registry_user:
        type: "string"
        description: "Username portion of credential to use for this registry"
      registry_verify:
        type: "boolean"
        description: "Use TLS/SSL verification for the registry URL"
    description: "A registry record describing the endpoint and credentials for a\
      \ registry"
    example:
      registry: "registry"
      registry_type: "registry_type"
      registry_user: "registry_user"
      registry_pass: "registry_pass"
      registry_verify: true
  RepositoryTagList:
    type: "array"
    description: "List of discovered tags in a repository"
    items:
      type: "string"
  Service:
    type: "object"
    properties:
      base_url:
        type: "string"
        description: "The url to reach the service, including port as needed"
      hostid:
        type: "string"
        description: "The unique id of the host on which the service is executing"
      service_detail:
        $ref: "#/definitions/StatusResponse"
      servicename:
        type: "string"
        description: "Registered service name"
      status:
        type: "boolean"
      status_message:
        type: "string"
        description: "A state indicating the condition of the service. Normal operation\
          \ is 'registered'"
      version:
        type: "string"
        description: "The version of the service as reported by the service implementation\
          \ on registration"
    description: "A service status record"
  ServiceList:
    type: "array"
    description: "A list of service objects"
    items:
      $ref: "#/definitions/Service"
  ServiceVersion:
    type: "object"
    properties:
      api:
        $ref: "#/definitions/ServiceVersion_api"
      db:
        $ref: "#/definitions/ServiceVersion_db"
      service:
        $ref: "#/definitions/ServiceVersion_service"
    description: "Version information for a service"
    example:
      service:
        version: "version"
      api:
        version: "version"
      db:
        schema_version: "schema_version"
  StandaloneVulnerability:
    type: "object"
    properties:
      affected_packages:
        type: "array"
        description: "The array of packages (typically packages) that are vulnerable-to\
          \ or provide fixes-for this vulnerability"
        items:
          $ref: "#/definitions/PackageReference"
      id:
        type: "string"
        description: "Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily\
          \ unique across namespaces"
      link:
        type: "string"
        description: "URL for the upstream CVE record in the reporting source (e.g.\
          \ ubuntu security tracker)"
      namespace:
        type: "string"
        description: "The namespace for the vulnerability record to avoid conflicts\
          \ for the same id in different distros or sources (e.g. deb vs ubuntu for\
          \ same CVE)"
      severity:
        type: "string"
        description: "Severity label specific to the namepsace"
        enum:
        - "Unknown"
        - "Negligible"
        - "Low"
        - "Medium"
        - "High"
        - "Critical"
    description: "A single vulnerability record in a single namespace, the unique\
      \ key is the combinatino of the id and namespace"
  StatusResponse:
    type: "object"
    properties:
      available:
        type: "boolean"
      busy:
        type: "boolean"
      db_version:
        type: "string"
      detail:
        type: "object"
        properties: {}
      message:
        type: "string"
      up:
        type: "boolean"
      version:
        type: "string"
    description: "System status response"
    example:
      db_version: "db_version"
      busy: true
      available: true
      detail: "{}"
      up: true
      message: "message"
      version: "version"
  Subscription:
    type: "object"
    properties:
      active:
        type: "boolean"
        description: "Is the subscription currently active"
      subscription_id:
        type: "string"
        description: "the unique id for this subscription record"
      subscription_key:
        type: "string"
        description: "The key value that the subscription references. E.g. a tag value\
          \ or a repo name."
      subscription_type:
        type: "string"
        description: "The type of the subscription"
        enum:
        - "policy_eval"
        - "tag_update"
        - "vuln_update"
        - "repo_update"
        - "analysis_update"
      subscription_value:
        type: "string"
        description: "The value of the subscription target"
        x-nullable: true
      userId:
        type: "string"
        description: "The userId of the subscribed user"
    description: "Subscription entry"
  SubscriptionList:
    type: "array"
    description: "List of subscriptions"
    items:
      $ref: "#/definitions/Subscription"
  SubscriptionRequest:
    type: "object"
    properties:
      subscription_key:
        type: "string"
      subscription_type:
        type: "string"
        enum:
        - "policy_eval"
        - "tag_update"
        - "vuln_update"
        - "repo_update"
        - "analysis_update"
      subscription_value:
        type: "string"
        x-nullable: true
    description: "A subscription entry to add to the system"
    example:
      subscription_value: "subscription_value"
      subscription_key: "subscription_key"
      subscription_type: "policy_eval"
  SubscriptionUpdate:
    type: "object"
    properties:
      active:
        type: "boolean"
        description: "Toggle the subscription processing on or off"
      subscription_value:
        type: "string"
        description: "The new subscription value, e.g. the new tag to be subscribed\
          \ to"
        x-nullable: true
    description: "A modification to a subscription entry to change its status or value"
    example:
      subscription_value: "subscription_value"
      active: true
  SystemStatusResponse:
    type: "object"
    properties:
      service_states:
        $ref: "#/definitions/ServiceList"
    description: "System status response"
    example:
      service_states: ""
  TagEntry:
    type: "object"
    properties:
      detected_at:
        type: "string"
        format: "date-time"
        description: "The timestamp at which the Anchore Engine detected this tag\
          \ was mapped to the image digest. Does not necessarily indicate when the\
          \ tag was actually pushed to the registry."
      pullstring:
        type: "string"
        description: "The pullable string for the tag. E.g. \"docker.io/library/node:latest\""
      registry:
        type: "string"
        description: "The registry hostname:port section of the pull string"
      repository:
        type: "string"
        description: "The repository section of the pull string"
      tag:
        type: "string"
        description: "The tag-only section of the pull string"
    description: "A docker-pullable tag value as well as deconstructed components"
  TriggerParamSpec:
    type: "object"
    properties:
      description:
        type: "string"
      example:
        type: "string"
        description: "An example value for the parameter (encoded as a string if the\
          \ parameter is an object or list type)"
        x-nullable: true
      name:
        type: "string"
        description: "Parameter name as it appears in policy document"
      required:
        type: "boolean"
        description: "Is this a required parameter or optional"
      state:
        type: "string"
        description: "State of the trigger parameter"
        enum:
        - "active"
        - "deprecated"
        - "eol"
      superceded_by:
        type: "string"
        description: "The name of another trigger that supercedes this on functionally\
          \ if this is deprecated"
        x-nullable: true
      validator:
        type: "object"
        description: "If present, a definition for validation of input. Typically\
          \ a jsonschema object that can be used to validate an input against."
        properties: {}
    example:
      name: "name"
      validator: "{}"
      description: "description"
      superceded_by: "superceded_by"
      state: "active"
      required: true
      example: "example"
  TriggerSpec:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Trigger description for what it tests and when it will fire\
          \ during evaluation"
      name:
        type: "string"
        description: "Name of the trigger as it would appear in a policy document"
      parameters:
        type: "array"
        description: "The list of parameters that are valid for this trigger"
        items:
          $ref: "#/definitions/TriggerParamSpec"
      state:
        type: "string"
        description: "State of the trigger"
        enum:
        - "active"
        - "deprecated"
        - "eol"
      superceded_by:
        type: "string"
        description: "The name of another trigger that supercedes this on functionally\
          \ if this is deprecated"
        x-nullable: true
    description: "Definition of a trigger and its parameters"
    example:
      name: "name"
      description: "description"
      superceded_by: "superceded_by"
      state: "active"
      parameters:
      - name: "name"
        validator: "{}"
        description: "description"
        superceded_by: "superceded_by"
        state: "active"
        required: true
        example: "example"
      - name: "name"
        validator: "{}"
        description: "description"
        superceded_by: "superceded_by"
        state: "active"
        required: true
        example: "example"
  User:
    type: "object"
    required:
    - "username"
    properties:
      created_at:
        type: "string"
        format: "date-time"
        description: "The timestampt the user record was created"
      last_updated:
        type: "string"
        format: "date-time"
        description: "The timestamp of the last update to this record"
      username:
        type: "string"
        description: "The username to authenticate with"
    description: "A username, password pair that can be used to authenticate with\
      \ the service as a specific user"
    example:
      last_updated: "2000-01-23T04:56:07.000+00:00"
      created_at: "2000-01-23T04:56:07.000+00:00"
      username: "username"
  UserCreationRequest:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      password:
        type: "string"
        description: "The initial password for the user, must be at least 6 characters,\
          \ up to 128"
        pattern: ".{6,128}$"
      username:
        type: "string"
        description: "The username to create"
        pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]{1,126}[a-zA-Z0-9]$"
    description: "A payload for creating a new user, includes the username and password\
      \ in a single request"
    example:
      password: "password"
      username: "username"
  UserList:
    type: "array"
    items:
      $ref: "#/definitions/User"
  Vulnerability:
    type: "object"
    properties:
      feed:
        type: "string"
        description: "The name of the feed where vulnerability match was made"
      feed_group:
        type: "string"
        description: "The name of the feed group where vulnerability match was made"
      fix:
        type: "string"
        description: "The package containing a fix, if available"
      package:
        type: "string"
        description: "The package name and version that are vulnerable in the image"
      package_cpe:
        type: "string"
        description: "The CPE string (if applicable) describing the package to vulnerability\
          \ match"
      package_name:
        type: "string"
        description: "The name of the vulnerable package artifact"
      package_path:
        type: "string"
        description: "The location (if applicable) of the vulnerable package in the\
          \ container filesystem"
      package_type:
        type: "string"
        description: "The type of vulnerable package"
      package_version:
        type: "string"
        description: "The version of the vulnerable package artifact"
      severity:
        type: "string"
        description: "The severity of the vulnerability"
      url:
        type: "string"
        description: "The url for more information about the vulnerability"
      vuln:
        type: "string"
        description: "The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123"
  VulnerabilityList:
    type: "array"
    description: "List of Vulnerability objects"
    items:
      $ref: "#/definitions/Vulnerability"
  VulnerabilityResponse:
    type: "object"
    properties:
      imageDigest:
        type: "string"
      vulnerabilities:
        $ref: "#/definitions/VulnerabilityList"
      vulnerability_type:
        type: "string"
    description: "envelope containing list of vulnerabilities"
    example:
      vulnerability_type: "vulnerability_type"
      vulnerabilities: ""
      imageDigest: "imageDigest"
  VulnerableImage:
    type: "object"
    properties:
      affected_packages:
        type: "array"
        items:
          $ref: "#/definitions/VulnerablePackageReference"
      image:
        $ref: "#/definitions/ImageReference"
    description: "A record of an image vulnerable to some known vulnerability. Includes\
      \ vulnerable package information"
  VulnerablePackageReference:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Package name"
      namespace:
        type: "string"
        description: "Vulnerability namespace of affected package"
      severity:
        type: "string"
        description: "Severity of vulnerability affecting package"
      type:
        type: "string"
        description: "Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)"
      version:
        type: "string"
        description: "A version for the package. If null, then references all versions"
        x-nullable: true
    description: "A record of a software item which is vulnerable or carries a fix\
      \ for a vulnerability"
  Whitelist:
    type: "object"
    required:
    - "id"
    - "version"
    properties:
      comment:
        type: "string"
      id:
        type: "string"
      items:
        type: "array"
        items:
          $ref: "#/definitions/WhitelistItem"
      name:
        type: "string"
      version:
        type: "string"
    description: "A collection of whitelist items to match a policy evaluation against."
    example:
      name: "name"
      comment: "comment"
      id: "id"
      items:
      - trigger_id: "trigger_id"
        gate: "gate"
        id: "id"
      - trigger_id: "trigger_id"
        gate: "gate"
        id: "id"
      version: "version"
  WhitelistItem:
    type: "object"
    required:
    - "gate"
    - "trigger_id"
    properties:
      gate:
        type: "string"
      id:
        type: "string"
      trigger_id:
        type: "string"
    description: "Identifies a specific gate and trigger match from a policy against\
      \ an image and indicates it should be ignored in final policy decisions"
    example:
      trigger_id: "trigger_id"
      gate: "gate"
      id: "id"
  ContentFilesResponse_content:
    properties:
      filename:
        type: "string"
      gid:
        type: "integer"
      linkdest:
        type: "string"
        x-nullable: true
      mode:
        type: "string"
      sha256:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
      type:
        type: "string"
      uid:
        type: "integer"
    example:
      mode: "mode"
      uid: 1
      filename: "filename"
      gid: 0
      sha256: "sha256"
      size: 6
      linkdest: "linkdest"
      type: "type"
  ContentJAVAPackageResponse_content:
    properties:
      implementation-version:
        type: "string"
      location:
        type: "string"
      maven-version:
        type: "string"
      origin:
        type: "string"
      package:
        type: "string"
      specification-version:
        type: "string"
      type:
        type: "string"
    example:
      package: "package"
      implementation-version: "implementation-version"
      origin: "origin"
      maven-version: "maven-version"
      location: "location"
      type: "type"
      specification-version: "specification-version"
  ContentPackageResponse_content:
    properties:
      license:
        type: "string"
      location:
        type: "string"
      origin:
        type: "string"
      package:
        type: "string"
      size:
        type: "string"
      type:
        type: "string"
      version:
        type: "string"
    example:
      license: "license"
      package: "package"
      size: "size"
      origin: "origin"
      location: "location"
      type: "type"
      version: "version"
  EventResponse_event_resource:
    properties:
      id:
        type: "string"
      type:
        type: "string"
      user_id:
        type: "string"
    example:
      user_id: "user_id"
      id: "id"
      type: "type"
  EventResponse_event_source:
    properties:
      base_url:
        type: "string"
      hostid:
        type: "string"
      request_id:
        type: "string"
      servicename:
        type: "string"
    example:
      base_url: "base_url"
      hostid: "hostid"
      servicename: "servicename"
      request_id: "request_id"
  EventResponse_event:
    properties:
      details:
        type: "object"
        properties: {}
      level:
        type: "string"
      message:
        type: "string"
      resource:
        $ref: "#/definitions/EventResponse_event_resource"
      source:
        $ref: "#/definitions/EventResponse_event_source"
      timestamp:
        type: "string"
        format: "date-time"
      type:
        type: "string"
    example:
      level: "level"
      resource:
        user_id: "user_id"
        id: "id"
        type: "type"
      details: "{}"
      source:
        base_url: "base_url"
        hostid: "hostid"
        servicename: "servicename"
        request_id: "request_id"
      message: "message"
      type: "type"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  PolicyRule_params:
    required:
    - "name"
    - "value"
    properties:
      name:
        type: "string"
      value:
        type: "string"
    example:
      name: "name"
      value: "value"
  ServiceVersion_api:
    properties:
      version:
        type: "string"
        description: "Semantic version of the api"
    description: "Api Version string"
    example:
      version: "version"
  ServiceVersion_db:
    properties:
      schema_version:
        type: "string"
        description: "Semantic version of the db schema"
    example:
      schema_version: "schema_version"
  ServiceVersion_service:
    properties:
      version:
        type: "string"
        description: "Semantic Version string of the service implementation"
    example:
      version: "version"
parameters:
  AsAccountParameter:
    name: "x-anchore-account"
    in: "header"
    description: "An account name to change the resource scope of the request to that\
      \ account, if permissions allow (admin only)"
    required: false
    type: "string"
    x-exportParamName: "XAnchoreAccount"
    x-optionalDataType: "String"
